Index: freeciv/server/maphand.c
===================================================================
--- freeciv/server/maphand.c	(revision 23063)
+++ freeciv/server/maphand.c	(working copy)
@@ -37,6 +37,7 @@
 #include "unit.h"
 #include "unitlist.h"
 #include "vision.h"
+#include "astring.h"
 
 /* generator */
 #include "utilities.h"
@@ -475,6 +476,34 @@
 }
 
 /**************************************************************************
+  Fill bases string describig tile roads to web-client.
+**************************************************************************/
+static void build_bases_string(char *buffer, bv_bases *bases)
+{
+  int i = 0;
+
+  base_type_iterate(pbase) {
+    buffer[i++] = BV_ISSET(*bases, base_index(pbase)) ? '1' : '0';
+  } base_type_iterate_end;
+
+  buffer[i] = '\0';
+}
+
+/**************************************************************************
+  Fill roads string describig tile roads to web-client.
+**************************************************************************/
+static void build_roads_string(char *buffer, bv_roads *roads)
+{
+  int i = 0;
+
+  road_type_iterate(proad) {
+    buffer[i++] = BV_ISSET(*roads, road_index(proad)) ? '1' : '0';
+  } road_type_iterate_end;
+
+  buffer[i] = '\0';
+}
+
+/**************************************************************************
   Send tile information to all the clients in dest which know and see
   the tile. If dest is NULL, sends to all clients (game.est_connections)
   which know and see tile.
@@ -533,8 +562,8 @@
       tile_special_type_iterate(spe) {
 	info.special[spe] = BV_ISSET(ptile->special, spe);
       } tile_special_type_iterate_end;
-      info.bases = ptile->bases;
-      info.roads = ptile->roads;
+      build_bases_string(info.bases, &ptile->bases);
+      build_roads_string(info.roads, &ptile->roads);
 
       if (ptile->label != NULL) {
         strncpy(info.label, ptile->label, sizeof(info.label));
@@ -569,8 +598,8 @@
       tile_special_type_iterate(spe) {
 	info.special[spe] = BV_ISSET(plrtile->special, spe);
       } tile_special_type_iterate_end;
-      info.bases = plrtile->bases;
-      info.roads = plrtile->roads;
+      build_bases_string(info.bases, &plrtile->bases);
+      build_roads_string(info.roads, &plrtile->roads);
 
       /* Labels never change, so they are not subject to fog of war */
       if (ptile->label != NULL) {
@@ -581,6 +610,8 @@
 
       send_packet_tile_info(pconn, &info);
     } else if (send_unknown) {
+      int i;
+
       info.known = TILE_UNKNOWN;
       info.continent = 0;
       info.owner = MAP_TILE_OWNER_NULL;
@@ -593,8 +624,15 @@
       tile_special_type_iterate(spe) {
         info.special[spe] = FALSE;
       } tile_special_type_iterate_end;
-      BV_CLR_ALL(info.bases);
-      BV_CLR_ALL(info.roads);
+      i = 0;
+      for (i = 0; i < game.control.num_base_types; i++) {
+        info.bases[i++] = '0';
+      }
+      info.bases[i] = '\0';
+      for (i = 0; i < game.control.num_road_types; i++) {
+        info.roads[i++] = '0';
+      }
+      info.roads[i] = '\0';
 
       info.label[0] = '\0';
 
@@ -2188,3 +2226,454 @@
 
   unbuffer_shared_vision(pto);
 }
+
+/****************************************************************************
+  Return a (static) string with a tile's food/prod/trade
+****************************************************************************/
+static const char *get_tile_output_text(const struct tile *ptile, 
+		                        struct player *pplayer)
+{
+  static struct astring str = ASTRING_INIT;
+  int i;
+  char output_text[O_LAST][16];
+
+  for (i = 0; i < O_LAST; i++) {
+    int before_penalty = 0;
+    int x = city_tile_output(NULL, ptile, FALSE, i);
+
+    if (NULL != pplayer) {
+      before_penalty = get_player_output_bonus(pplayer,
+                                               get_output_type(i),
+                                               EFT_OUTPUT_PENALTY_TILE);
+    }
+
+    if (before_penalty > 0 && x > before_penalty) {
+      fc_snprintf(output_text[i], sizeof(output_text[i]), "%d(-1)", x);
+    } else {
+      fc_snprintf(output_text[i], sizeof(output_text[i]), "%d", x);
+    }
+  }
+  
+  astr_clear(&str);
+  astr_add_line(&str, "%s/%s/%s",
+                output_text[O_FOOD],
+		output_text[O_SHIELD],
+		output_text[O_TRADE]);
+
+  return astr_str(&str);
+}
+
+
+
+/****************************************************************************
+  Creates the activity progress text for the given tile.
+
+  This should only be used inside popup_info_text and should eventually be
+  made static.
+****************************************************************************/
+static const char *concat_tile_activity_text(struct tile *ptile)
+{
+  int activity_total[ACTIVITY_LAST];
+  int activity_units[ACTIVITY_LAST];
+  int base_total[MAX_BASE_TYPES];
+  int base_units[MAX_BASE_TYPES];
+  int road_total[MAX_ROAD_TYPES];
+  int road_units[MAX_ROAD_TYPES];
+  int num_activities = 0;
+  int pillaging = 0;
+  int remains, turns, i;
+  static struct astring str = ASTRING_INIT;
+
+  astr_clear(&str);
+
+  memset(activity_total, 0, sizeof(activity_total));
+  memset(activity_units, 0, sizeof(activity_units));
+  memset(base_total, 0, sizeof(base_total));
+  memset(base_units, 0, sizeof(base_units));
+  memset(road_total, 0, sizeof(road_total));
+  memset(road_units, 0, sizeof(road_units));
+
+  unit_list_iterate(ptile->units, punit) {
+    if (punit->activity == ACTIVITY_PILLAGE) {
+      pillaging = 1;
+    } else if (punit->activity == ACTIVITY_BASE) {
+      int bidx = base_index(&(punit->activity_target->data.base));
+
+      base_total[bidx] += punit->activity_count;
+      base_total[bidx] += get_activity_rate_this_turn(punit);
+      base_units[bidx] += get_activity_rate(punit);
+    } else if (punit->activity == ACTIVITY_GEN_ROAD) {
+      int ridx = road_index(&(punit->activity_target->data.road));
+
+      road_total[ridx] += punit->activity_count;
+      road_total[ridx] += get_activity_rate_this_turn(punit);
+      road_units[ridx] += get_activity_rate(punit);
+    } else {
+      activity_total[punit->activity] += punit->activity_count;
+      activity_total[punit->activity] += get_activity_rate_this_turn(punit);
+      activity_units[punit->activity] += get_activity_rate(punit);
+    }
+  } unit_list_iterate_end;
+
+  if (pillaging) {
+    bv_special pillage_spe = get_unit_tile_pillage_set(ptile);
+    bv_bases pillage_bases = get_unit_tile_pillage_base_set(ptile);
+    bv_roads pillage_roads = get_unit_tile_pillage_road_set(ptile);
+    if (BV_ISSET_ANY(pillage_spe)
+        || BV_ISSET_ANY(pillage_bases)
+        || BV_ISSET_ANY(pillage_roads)) {
+      astr_add(&str, "%s(%s)", _("Pillage"),
+               get_infrastructure_text(pillage_spe, pillage_bases, pillage_roads));
+    } else {
+      /* Untargeted pillaging is happening. */
+      astr_add(&str, "%s", _("Pillage"));
+    }
+    num_activities++;
+  }
+
+  for (i = 0; i < ACTIVITY_LAST; i++) {
+    if (i == ACTIVITY_BASE) {
+      base_type_iterate(bp) {
+        Base_type_id b = base_index(bp);
+	if (base_units[b] > 0) {
+	  remains = tile_activity_base_time(ptile, b) - base_total[b];
+	  if (remains > 0) {
+	    turns = 1 + (remains + base_units[b] - 1) / base_units[b];
+	  } else {
+	    /* base will be finished this turn */
+	    turns = 1;
+	  }
+	  if (num_activities > 0) {
+	    astr_add(&str, "/");
+	  }
+	  astr_add(&str, "%s(%d)", base_name_translation(bp), turns);
+	  num_activities++;
+	}
+      } base_type_iterate_end;
+    } else if (i == ACTIVITY_GEN_ROAD) {
+      road_type_iterate(rp) {
+        Road_type_id r = road_index(rp);
+	if (road_units[r] > 0) {
+	  remains = tile_activity_road_time(ptile, r) - road_total[r];
+	  if (remains > 0) {
+	    turns = 1 + (remains + road_units[r] - 1) / road_units[r];
+	  } else {
+	    /* road will be finished this turn */
+	    turns = 1;
+	  }
+	  if (num_activities > 0) {
+	    astr_add(&str, "/");
+	  }
+	  astr_add(&str, "%s(%d)", road_name_translation(rp), turns);
+	  num_activities++;
+	}
+      } road_type_iterate_end;
+    } else if (is_build_or_clean_activity(i) && activity_units[i] > 0) {
+      if (num_activities > 0) {
+	astr_add(&str, "/");
+      }
+      remains = tile_activity_time(i, ptile) - activity_total[i];
+      if (remains > 0) {
+	turns = 1 + (remains + activity_units[i] - 1) / activity_units[i];
+      } else {
+	/* activity will be finished this turn */
+	turns = 1;
+      }
+      astr_add(&str, "%s(%d)", get_activity_text(i), turns);
+      num_activities++;
+    }
+  }
+
+  return astr_str(&str);
+
+}
+
+
+/****************************************************************************
+  Fill the buffer with the player's nation name (in adjective form) and
+  optionally add the player's team name.
+****************************************************************************/
+static inline void get_full_nation(char *buf, int buflen,
+                                   const struct player *pplayer)
+{
+  if (!buf || buflen < 1) {
+    return;
+  }
+
+  if (!pplayer) {
+    buf[0] = '\0';
+    return;
+  }
+
+  if (pplayer->team) {
+    /* TRANS: "<nation adjective>, team <team name>" */
+    fc_snprintf(buf, buflen, _("%s, team %s"),
+                nation_adjective_for_player(pplayer),
+                team_name_translation(pplayer->team));
+  } else {
+    fc_strlcpy(buf, nation_adjective_for_player(pplayer), buflen);
+  }
+}
+
+
+/****************************************************************************
+  For AIs, fill the buffer with their player name prefixed with "AI". For
+  humans, just fill it with their username.
+****************************************************************************/
+static inline void get_full_username(char *buf, int buflen,
+                                     const struct player *pplayer)
+{
+  if (!buf || buflen < 1) {
+    return;
+  }
+
+  if (!pplayer) {
+    buf[0] = '\0';
+    return;
+  }
+
+  if (pplayer->ai_controlled) {
+    /* TRANS: "AI <player name>" */
+    fc_snprintf(buf, buflen, _("AI %s"), pplayer->name);
+  } else {
+    fc_strlcpy(buf, pplayer->username, buflen);
+  }
+}
+
+
+/****************************************************************************
+  Text to popup on a middle-click in the mapview.
+  - copied from /client/text.c
+****************************************************************************/
+static const char *popup_info_text(struct tile *ptile, struct player *pplayer,
+  	 	                   struct unit *punit)
+{
+  const char *activity_text;
+  struct city *pcity = tile_city(ptile);
+  const char *diplo_nation_plural_adjectives[DS_LAST] =
+    {Q_("?nation:Neutral"), Q_("?nation:Hostile"),
+     Q_("?nation:Neutral"),
+     Q_("?nation:Peaceful"), Q_("?nation:Friendly"), 
+     Q_("?nation:Mysterious"), Q_("?nation:Friendly(team)")};
+  const char *diplo_city_adjectives[DS_LAST] =
+    {Q_("?city:Neutral"), Q_("?city:Hostile"),
+     Q_("?nation:Neutral"),
+     Q_("?city:Peaceful"), Q_("?city:Friendly"), Q_("?city:Mysterious"),
+     Q_("?city:Friendly(team)")};
+  static struct astring str = ASTRING_INIT;
+  char username[MAX_LEN_NAME + 32];
+  char nation[2 * MAX_LEN_NAME + 32];
+  int tile_x, tile_y, nat_x, nat_y;
+
+  astr_clear(&str);
+  index_to_map_pos(&tile_x, &tile_y, tile_index(ptile));
+  astr_add_line(&str, _("Location: (%d, %d) [%d]"),
+                tile_x, tile_y, tile_continent(ptile));
+  index_to_native_pos(&nat_x, &nat_y, tile_index(ptile));
+  astr_add_line(&str, _("Native coordinates: (%d, %d)"),
+                nat_x, nat_y);
+
+  astr_add_line(&str, _("Terrain: %s"),  tile_get_info_text(ptile, 0));
+  astr_add_line(&str, _("Food/Prod/Trade: %s"),
+		get_tile_output_text(ptile, pplayer));
+  if (tile_has_special(ptile, S_HUT)) {
+    astr_add_line(&str, _("Minor Tribe Village"));
+  }
+  if (BORDERS_DISABLED != game.info.borders && !pcity) {
+    struct player *owner = tile_owner(ptile);
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (NULL != pplayer && owner == pplayer) {
+      astr_add_line(&str, _("Our territory"));
+    } else if (NULL != owner && NULL == pplayer) {
+      /* TRANS: "Territory of <username> (<nation + team>)" */
+      astr_add_line(&str, _("Territory of %s (%s)"), username, nation);
+    } else if (NULL != owner) {
+      struct player_diplstate *ds = player_diplstate_get(pplayer,
+                                                         owner);
+
+      if (ds->type == DS_CEASEFIRE) {
+        int turns = ds->turns_left;
+
+        astr_add_line(&str,
+                      /* TRANS: "Territory of <username> (<nation + team>)
+                       * (<number> turn cease-fire)" */
+                      PL_("Territory of %s (%s) (%d turn cease-fire)",
+                          "Territory of %s (%s) (%d turn cease-fire)",
+                          turns),
+                      username, nation, turns);
+      } else {
+        int type = ds->type;
+
+        /* TRANS: "Territory of <username>
+         * (<nation + team> | <diplomatic state>)" */
+        astr_add_line(&str, _("Territory of %s (%s | %s)"),
+                      username, nation,
+                      diplo_nation_plural_adjectives[type]);
+      }
+    } else {
+      astr_add_line(&str, _("Unclaimed territory"));
+    }
+  }
+  if (pcity) {
+    /* Look at city owner, not tile owner (the two should be the same, if
+     * borders are in use). */
+    struct player *owner = city_owner(pcity);
+    const char *improvements[improvement_count()];
+    int has_improvements = 0;
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (NULL == pplayer || owner == pplayer) {
+      /* TRANS: "City: <city name> | <username> (<nation + team>)" */
+      astr_add_line(&str, _("City: %s | %s (%s)"),
+                    city_name(pcity), username, nation);
+    } else {
+      struct player_diplstate *ds
+        = player_diplstate_get(pplayer, owner);
+      if (ds->type == DS_CEASEFIRE) {
+        int turns = ds->turns_left;
+
+        /* TRANS:  "City: <city name> | <username>
+         * (<nation + team>, <number> turn cease-fire)" */
+        astr_add_line(&str, PL_("City: %s | %s (%s, %d turn cease-fire)",
+                                "City: %s | %s (%s, %d turn cease-fire)",
+                                turns),
+                      city_name(pcity), username, nation, turns);
+      } else {
+        /* TRANS: "City: <city name> | <username>
+         * (<nation + team>, <diplomatic state>)" */
+        astr_add_line(&str, _("City: %s | %s (%s, %s)"),
+                      city_name(pcity), username, nation,
+                      diplo_city_adjectives[ds->type]);
+      }
+    }
+    if (can_player_see_units_in_city(pplayer, pcity)) {
+      int count = unit_list_size(ptile->units);
+
+      if (count > 0) {
+        astr_add(&str, PL_(" | Occupied with %d unit.",
+                                " | Occupied with %d units.", count), count);
+      } else {
+        astr_add(&str, _(" | Not occupied."));
+      }
+    } else {
+      if (pcity->client.occupied) {
+        astr_add(&str, _(" | Occupied."));
+      } else {
+        astr_add(&str, _(" | Not occupied."));
+      }
+    }
+    improvement_iterate(pimprove) {
+      if (is_improvement_visible(pimprove)
+          && city_has_building(pcity, pimprove)) {
+        improvements[has_improvements++] =
+            improvement_name_translation(pimprove);
+      }
+    } improvement_iterate_end;
+
+    if (0 < has_improvements) {
+      struct astring list = ASTRING_INIT;
+
+      astr_build_and_list(&list, improvements, has_improvements);
+      /* TRANS: %s is a list of "and"-separated improvements. */
+      astr_add_line(&str, _("   with %s."), astr_str(&list));
+      astr_free(&list);
+    }
+
+  }
+  {
+    const char *infratext = get_infrastructure_text(ptile->special,
+                                                    ptile->bases,
+                                                    ptile->roads);
+    if (*infratext != '\0') {
+      astr_add_line(&str, _("Infrastructure: %s"), infratext);
+    }
+  }
+  activity_text = concat_tile_activity_text(ptile);
+  if (strlen(activity_text) > 0) {
+    astr_add_line(&str, _("Activity: %s"), activity_text);
+  }
+  if (punit && !pcity) {
+    struct player *owner = unit_owner(punit);
+    struct unit_type *ptype = unit_type(punit);
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (!pplayer || owner == pplayer) {
+      struct city *pcity = player_city_by_number(owner, punit->homecity);
+
+      if (pcity) {
+        /* TRANS: "Unit: <unit type> | <username>
+         * (<nation + team>, <homecity>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s, %s)"),
+                      utype_name_translation(ptype), username,
+                      nation, city_name(pcity));
+      } else {
+        /* TRANS: "Unit: <unit type> | <username> (<nation + team>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s)"),
+                      utype_name_translation(ptype), username, nation);
+      }
+    } else if (NULL != owner) {
+      struct player_diplstate *ds = player_diplstate_get(pplayer,
+                                                         owner);
+      if (ds->type == DS_CEASEFIRE) {
+        int turns = ds->turns_left;
+
+        /* TRANS:  "Unit: <unit type> | <username> (<nation + team>,
+         * <number> turn cease-fire)" */
+        astr_add_line(&str, PL_("Unit: %s | %s (%s, %d turn cease-fire)",
+                                "Unit: %s | %s (%s, %d turn cease-fire)",
+                                turns),
+                      utype_name_translation(ptype),
+                      username, nation, turns);
+      } else {
+        /* TRANS: "Unit: <unit type> | <username> (<nation + team>,
+         * <diplomatic state>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s, %s)"),
+                      utype_name_translation(ptype), username, nation,
+                      diplo_city_adjectives[ds->type]);
+      }
+    }
+
+    if (unit_owner(punit) == pplayer) {
+      /* Show bribe cost for own units. */
+      astr_add_line(&str, _("Bribe cost: %d"), unit_bribe_cost(punit));
+    } else {
+      /* We can only give an (lower) boundary for units of other players. */
+      astr_add_line(&str, _("Estimated bribe cost: > %d"),
+                    unit_bribe_cost(punit));
+    }
+
+    if ((NULL == pplayer || owner == pplayer)
+        && unit_list_size(ptile->units) >= 2) {
+      /* TRANS: "5 more" units on this tile */
+      astr_add(&str, _("  (%d more)"), unit_list_size(ptile->units) - 1);
+    }
+  }
+
+  astr_break_lines(&str, LINE_BREAK);
+  return astr_str(&str);
+}
+
+
+
+/****************************************************************************
+...
+****************************************************************************/
+void handle_info_text_req(struct player *pplayer, int loc, int visible_unit_id)
+{
+  struct tile *ptile = index_to_tile(loc);
+  struct unit *punit = (visible_unit_id == 0) ? NULL : game_unit_by_number(visible_unit_id);
+  const char *info_text = popup_info_text(ptile, pplayer, punit);
+
+  conn_list_iterate(pplayer->connections, pconn) {
+    dsend_packet_info_text_message(pconn, info_text);
+  } conn_list_iterate_end;
+
+}
+
Index: freeciv/server/maphand.h
===================================================================
--- freeciv/server/maphand.h	(revision 23063)
+++ freeciv/server/maphand.h	(working copy)
@@ -139,4 +139,6 @@
 void give_distorted_map(struct player *pfrom, struct player *pto, int good,
                         int bad, bool reveal_cities);
 
+void handle_info_text_req(struct player *pplayer, int loc, int visible_unit_id);
+
 #endif  /* FC__MAPHAND_H */
